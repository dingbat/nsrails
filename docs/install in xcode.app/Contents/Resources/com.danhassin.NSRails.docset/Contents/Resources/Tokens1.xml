<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/NSRConfig.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/NSRConfig</TokenIdentifier>
			<Abstract>The NSRails configuration class is NSRConfig, a class that stores your Rails app's configuration settings (server URL, etc) for either your app globally or in specific instances. It also supports basic HTTP authentication and very simple OAuth authentication.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setAppURL:</TokenIdentifier>
			<Abstract>Root URL for your Rails server.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appURL</Declaration>
			
			
			<Anchor>//api/name/appURL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/appURL</TokenIdentifier>
			<Abstract>Root URL for your Rails server.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appURL</Declaration>
			
			
			<Anchor>//api/name/appURL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setPerformsCompletionBlocksOnMainThread:</TokenIdentifier>
			<Abstract>When true, the completion blocks passed into asynchronous remote methods will be called on the main thread.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL performsCompletionBlocksOnMainThread</Declaration>
			
			
			<Anchor>//api/name/performsCompletionBlocksOnMainThread</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/performsCompletionBlocksOnMainThread</TokenIdentifier>
			<Abstract>When true, the completion blocks passed into asynchronous remote methods will be called on the main thread.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL performsCompletionBlocksOnMainThread</Declaration>
			
			
			<Anchor>//api/name/performsCompletionBlocksOnMainThread</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setManagesNetworkActivityIndicator:</TokenIdentifier>
			<Abstract>The network activity indicator (gray spinning wheel on the status bar) will automatically turn on and off with requests.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL managesNetworkActivityIndicator</Declaration>
			
			
			<Anchor>//api/name/managesNetworkActivityIndicator</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/managesNetworkActivityIndicator</TokenIdentifier>
			<Abstract>The network activity indicator (gray spinning wheel on the status bar) will automatically turn on and off with requests.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL managesNetworkActivityIndicator</Declaration>
			
			
			<Anchor>//api/name/managesNetworkActivityIndicator</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setSuccinctErrorMessages:</TokenIdentifier>
			<Abstract>Cleaner error messages when generating NSError objects.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL succinctErrorMessages</Declaration>
			
			
			<Anchor>//api/name/succinctErrorMessages</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/succinctErrorMessages</TokenIdentifier>
			<Abstract>Cleaner error messages when generating NSError objects.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL succinctErrorMessages</Declaration>
			
			
			<Anchor>//api/name/succinctErrorMessages</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setTimeoutInterval:</TokenIdentifier>
			<Abstract>Timeout interval for HTTP requests.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) NSTimeInterval timeoutInterval</Declaration>
			
			
			<Anchor>//api/name/timeoutInterval</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/timeoutInterval</TokenIdentifier>
			<Abstract>Timeout interval for HTTP requests.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) NSTimeInterval timeoutInterval</Declaration>
			
			
			<Anchor>//api/name/timeoutInterval</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setAutoinflectsClassNames:</TokenIdentifier>
			<Abstract>When true, all Objective-C class names will have a default equivalence to their under_scored versions.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL autoinflectsClassNames</Declaration>
			
			
			<Anchor>//api/name/autoinflectsClassNames</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/autoinflectsClassNames</TokenIdentifier>
			<Abstract>When true, all Objective-C class names will have a default equivalence to their under_scored versions.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL autoinflectsClassNames</Declaration>
			
			
			<Anchor>//api/name/autoinflectsClassNames</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setAutoinflectsPropertyNames:</TokenIdentifier>
			<Abstract>When true, all Objective-C property names will have a default equivalence to their under_scored versions.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL autoinflectsPropertyNames</Declaration>
			
			
			<Anchor>//api/name/autoinflectsPropertyNames</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/autoinflectsPropertyNames</TokenIdentifier>
			<Abstract>When true, all Objective-C property names will have a default equivalence to their under_scored versions.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL autoinflectsPropertyNames</Declaration>
			
			
			<Anchor>//api/name/autoinflectsPropertyNames</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setIgnoresClassPrefixes:</TokenIdentifier>
			<Abstract>When converting class names to their Rails equivalents, prefixes will be omitted.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL ignoresClassPrefixes</Declaration>
			
			
			<Anchor>//api/name/ignoresClassPrefixes</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/ignoresClassPrefixes</TokenIdentifier>
			<Abstract>When converting class names to their Rails equivalents, prefixes will be omitted.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL ignoresClassPrefixes</Declaration>
			
			
			<Anchor>//api/name/ignoresClassPrefixes</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setAppUsername:</TokenIdentifier>
			<Abstract>Username for basic HTTP authentication (if used by server.)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appUsername</Declaration>
			
			
			<Anchor>//api/name/appUsername</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/appUsername</TokenIdentifier>
			<Abstract>Username for basic HTTP authentication (if used by server.)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appUsername</Declaration>
			
			
			<Anchor>//api/name/appUsername</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setAppPassword:</TokenIdentifier>
			<Abstract>Password for basic HTTP authentication (if used by server.)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appPassword</Declaration>
			
			
			<Anchor>//api/name/appPassword</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/appPassword</TokenIdentifier>
			<Abstract>Password for basic HTTP authentication (if used by server.)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appPassword</Declaration>
			
			
			<Anchor>//api/name/appPassword</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setAppOAuthToken:</TokenIdentifier>
			<Abstract>Token for OAuth authentication (if used by server.)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appOAuthToken</Declaration>
			
			
			<Anchor>//api/name/appOAuthToken</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/appOAuthToken</TokenIdentifier>
			<Abstract>Token for OAuth authentication (if used by server.)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *appOAuthToken</Declaration>
			
			
			<Anchor>//api/name/appOAuthToken</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setUpdateMethod:</TokenIdentifier>
			<Abstract>HTTP method used for updating objects.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *updateMethod</Declaration>
			
			
			<Anchor>//api/name/updateMethod</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/updateMethod</TokenIdentifier>
			<Abstract>HTTP method used for updating objects.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *updateMethod</Declaration>
			
			
			<Anchor>//api/name/updateMethod</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setDateFormat:</TokenIdentifier>
			<Abstract>Date format used if a property of type NSDate is encountered, to encode and decode NSDate objects.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *dateFormat</Declaration>
			
			
			<Anchor>//api/name/dateFormat</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/dateFormat</TokenIdentifier>
			<Abstract>Date format used if a property of type NSDate is encountered, to encode and decode NSDate objects.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *dateFormat</Declaration>
			
			
			<Anchor>//api/name/dateFormat</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/setManagedObjectContext:</TokenIdentifier>
			<Abstract>Managed object context for CoreData support. (Required if CoreData is enabled)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSManagedObjectContext *managedObjectContext</Declaration>
			
			
			<Anchor>//api/name/managedObjectContext</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/managedObjectContext</TokenIdentifier>
			<Abstract>Managed object context for CoreData support. (Required if CoreData is enabled)</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSManagedObjectContext *managedObjectContext</Declaration>
			
			
			<Anchor>//api/name/managedObjectContext</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRConfig/defaultConfig</TokenIdentifier>
			<Abstract>Returns the current default configuration.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>+ (NSRConfig *)defaultConfig</Declaration>
			
			<ReturnValue><Abstract>The configuration set for the current environment.</Abstract></ReturnValue>
			<Anchor>//api/name/defaultConfig</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRConfig/relevantConfigForClass:</TokenIdentifier>
			<Abstract>Returns the current relevant config for a given class.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>+ (NSRConfig *)relevantConfigForClass:(Class)class</Declaration>
			<Parameters>
				<Parameter>
					<Name>class</Name>
					<Abstract>he class - maybe has a custom config attached to it.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>The current relevant config for a given class.</Abstract></ReturnValue>
			<Anchor>//api/name/relevantConfigForClass:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRConfig/configForEnvironment:</TokenIdentifier>
			<Abstract>Returns the default configuration for a given environment.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>+ (NSRConfig *)configForEnvironment:(NSString *)environment</Declaration>
			<Parameters>
				<Parameter>
					<Name>environment</Name>
					<Abstract>Environment identifier.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Configuration set for environment.</Abstract></ReturnValue>
			<Anchor>//api/name/configForEnvironment:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRConfig/setCurrentEnvironment:</TokenIdentifier>
			<Abstract>Sets the global environment for NSRConfig.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>+ (void)setCurrentEnvironment:(NSString *)environment</Declaration>
			<Parameters>
				<Parameter>
					<Name>environment</Name>
					<Abstract>Environment identifier. Can be your own custom string or the constants NSRConfigEnvironmentDevelopment or NSRConfigEnvironmentProduction.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCurrentEnvironment:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRConfig/currentEnvironment</TokenIdentifier>
			<Abstract>Returns the identifier for the current global environment.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)currentEnvironment</Declaration>
			
			<ReturnValue><Abstract>The identifier for the current global environment.</Abstract></ReturnValue>
			<Anchor>//api/name/currentEnvironment</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/use</TokenIdentifier>
			<Abstract>Begins a context block of code to use the receiver as the default config.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/end</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)use</Declaration>
			
			
			<Anchor>//api/name/use</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/end</TokenIdentifier>
			<Abstract>Ends a context block of code to use the receiver as the default config.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/use</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)end</Declaration>
			
			
			<Anchor>//api/name/end</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/useIn:</TokenIdentifier>
			<Abstract>Executes a given block with the receiver as the default config in that block.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/use</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/end</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)useIn:(void ( ^ ) ( void ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract>Block to be executed with the default config context of receiver.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/useIn:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/useForClass:</TokenIdentifier>
			<Abstract>Specifies for all NSRails actions (instance and class methods) in a given class to use the receiver.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>- (void)useForClass:(Class)class</Declaration>
			<Parameters>
				<Parameter>
					<Name>class</Name>
					<Abstract>Class to use this config.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/useForClass:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/useAsDefault</TokenIdentifier>
			<Abstract>Specifies for all NSRails actions in the current environment to use the receiver.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>- (void)useAsDefault</Declaration>
			
			
			<Anchor>//api/name/useAsDefault</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/useAsDefaultForEnvironment:</TokenIdentifier>
			<Abstract>Specifies for all NSRails actions in a given environment to use the receiver.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>- (void)useAsDefaultForEnvironment:(NSString *)environment</Declaration>
			<Parameters>
				<Parameter>
					<Name>environment</Name>
					<Abstract>Environment identifier. Can be your own custom string or the constants NSRConfigEnvironmentDevelopment or NSRConfigEnvironmentProduction.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/useAsDefaultForEnvironment:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/stringFromDate:</TokenIdentifier>
			<Abstract>Returns a string representation of a given date formatted using dateFormat.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/dateFromString:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/dateFormat</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSString *)stringFromDate:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract>The date to format.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/stringFromDate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/dateFromString:</TokenIdentifier>
			<Abstract>Returns a date representation of a given string interpreted using dateFormat.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/stringFromDate:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instp/NSRConfig/dateFormat</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSDate *)dateFromString:(NSString *)string</Declaration>
			<Parameters>
				<Parameter>
					<Name>string</Name>
					<Abstract>The string to parse.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/dateFromString:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRConfig/initWithAppURL:</TokenIdentifier>
			<Abstract>Initializes a new NSRConfig instance with an app URL.</Abstract>
			<DeclaredIn>NSRConfig.h</DeclaredIn>			
			
			<Declaration>- (id)initWithAppURL:(NSString *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract>App URL to be set to the new instance.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithAppURL:</Anchor>
		</Token>
		
	</File>
</Tokens>