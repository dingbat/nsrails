#!/usr/bin/env ruby

=begin
_|_|_|    _|_|  _|_|  _|_|  _|  _|      _|_|           
|  _|  _|_|    _|    _|_|  _|  _|_|  _|_|     AUTOGEN

Copyright (c) 2012 Dan Hassin.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
=end

require 'rubygems'
require 'active_support/inflector'

class Model
  attr_accessor :name, :property_collection
  
  def initialize
    super
    @property_collection = PropertyCollection.new
  end
  
  def look_for_relationships(file)    
    begin
      model_file = File.open($options[:path]+"app/models/#{file}.rb")
    rescue => e
      return
    end
    
    while line = model_file.gets()
      next if (line.length > 0 && line[0] == "#")

      begin
        match = line.match(/:([^,]*)(,?)/).captures[0].strip
      rescue
        next
      end
      
      match = match.camelize(:lower) if !$options[:ruby]

      p = Property.new
      p.name = match 
      p.has_many = line =~ /has_many/
      p.belongs_to = line =~ /belongs_to/
      
      if p.has_many || p.belongs_to || line =~ /has_one/
        if line =~ /:class_name/
          match = line.match(/:class_name => ([^,]*)(,?)/)
          if match
            c_name = match.captures[0].strip
            c_name.gsub!("'","")
            c_name.gsub!("\"","")

            p.nested_class = c_name
          end
        else
          p.nested_class = p.name.classify
        end
        
        p.nested_class = $options[:prefix]+p.nested_class if $options[:prefix]
        
        if p.has_many
          p.type = $options[:mutable_sets] ? "NSMutableSet" : "NSMutableArray"
        else
          p.type = p.nested_class
        end
        
        @property_collection.properties << p
      end
    end    
  end
  
  def interface_properties
    final = []
    property_collection.props_grouped_by_type.each do |type, props|
      final << "@property (nonatomic, strong) #{type} #{props.map { |x| "*#{x.name}" }.join(', ')};"
    end
    return nil if final.empty?
    final.join("\n")
  end
  
  def synthesize
    "@synthesize "+@property_collection.property_names.join(", ")+";"
  end
  
  def format_unique_nested_classes(format)
    done = []
    @property_collection.properties.each do |p|
      next if !p.nested_class || p.nested_class == self.name
      str = format.gsub("%@", p.nested_class)
      if !done.include?(str)
        done << str
      end
    end
    return nil if done.empty?
    done.join("\n")
  end
  
  def print_objc_h
    str = Generator.objc_header("#{@name}.h")+"\n\n"
    
    str += "#import \"NSRails.h\""+"\n\n"
    
    class_imports = format_unique_nested_classes("@class %@;")
    str += class_imports + "\n\n" if class_imports
    
    str += "@interface #{@name} : NSRRemoteObject"
    
    props = interface_properties
    str += "\n\n"+props if props
    
    str += "\n\n@end"
  end
  
  def print_objc_m
    str = Generator.objc_header("#{@name}.m")+"\n\n"
  
    str += "#import \"#{@name}.h\""+"\n\n"
    
    file_imports = format_unique_nested_classes('#import "%@.h"')
    str += file_imports + "\n\n" if file_imports
    
    str += "@implementation #{@name}"
    
    synth = synthesize
    if synth
      str += "\n"+synth
      if @property_collection.has_relationships?
        str += "\n\n- (Class) nestedClassForProperty:(NSString *)property\n{\n"
        @property_collection.properties.each do |p|
          if p.prints_relationship?
            str += "#{p.print_relationship}\n"
          end
        end
        str += "\n    return [super nestedClassForProperty:property];\n}"
        
      end
      
      if @property_collection.has_belong_tos?
        str += "\n\n- (BOOL) shouldOnlySendIDKeyForNestedObjectProperty:(NSString *)property\n{\n"
        belong_tos = []
        @property_collection.properties.each do |p|
          if p.belongs_to
            belong_tos << "[property isEqualToString:\"#{p.name}\"]"
          end
        end
        conditional = belong_tos.join(" || ")
        conditional = "(#{conditional})" if (belong_tos.size > 1)
        str += "    return "+conditional+";"
        str += "\n}"
      end
    end
    
    str += "\n\n@end"
  end
  
  def print_ruby
    str = "class #{@name} < NSRRemoteObject\n"
    
    names = @property_collection.property_names
    if names && !names.empty?
      str += "  attr_accessor :#{names.join(', :')}\n"

      str += "\n  def remoteProperties\n    super + [\"#{names.join('", "')}\"]\n  end"
      
      if @property_collection.has_relationships?
        str += "\n\n  def nestedClassForProperty(property)\n"
        @property_collection.properties.each do |p|
          if p.prints_relationship?
            str += "#{p.print_relationship}\n"
          end
        end
        str += "  end"
      end

      if @property_collection.has_belong_tos?
        str += "\n\n  def shouldOnlySendIDKeyForNestedObjectProperty(property)\n"
        belong_tos = []
        @property_collection.properties.each do |p|
          if p.belongs_to
            belong_tos << "(property == \"#{p.name}\")"
          end
        end
        str += "    "+belong_tos.join(" || ")
        str += "\n  end"
      end
    end
    
    str += "\nend"
  end
end

class PropertyCollection
  attr_accessor :properties
  
  def initialize
    @properties = []
  end
  
  def property_names
    @properties.map { |p| p.name }
  end
  
  def props_grouped_by_type
    types = {}
    @properties.each do |prop|
      types[prop.type] ||= []
      types[prop.type] << prop
    end
    types
  end
  
  def has_relationships?
    @properties.each do |prop|
      if prop.prints_relationship?
        return true
      end
    end
    false
  end
  
  def has_belong_tos?
    @properties.each do |prop|
      if prop.belongs_to
        return true
      end
    end
    false
  end
end

class Property
  attr_accessor :nested_class, :name, :type, :belongs_to, :has_many
    
  def date?
    @type == "NSDate"
  end
  
  def timestamp?
    self.name.camelize(:lower) == "createdAt" || self.name.camelize(:lower) == "updatedAt"
  end
  
  def prints_relationship?
    if $options[:ruby]
      nested_class
    else
      has_many
    end
  end
  
  def print_relationship
    method = has_many ? "hasMany" : "belongsTo"
    if $options[:ruby]
      str = "    return #{nested_class} if property == \"#{name}\""
    else
      str = "    if ([property isEqualToString:@\"#{name}\"])\n"
      str += "        return [#{nested_class} class];"
    end 
    str
  end
end

class Generator  
  OBJC_CONVERSIONS = {integer:"NSNumber", float:"NSNumber", double:"NSNumber", boolean:"NSNumber", string:"NSString", text:"NSString", datetime:"NSDate", date:"NSDate"}
  
  def self.objc_header(file)
%Q{//
//  #{file}
//  #{$options[:project]}
//
//  Created by #{$options[:author]} on #{Time.now.strftime("%m/%d/%Y")}.
//  Copyright (c) #{Time.now.year.to_s} #{$options[:company]}. All rights reserved.
//}
  end
  
  def generate_with_schema(schema)
    @models = []

    current_model = nil
    while line = schema.gets()
      if (line.length > 0 && line[0] == "#"[0])
        next
      end
      
      new_model = false
      if line =~ /create_table/
        new_model = true
        model_name = line.match(/create_table "(.*)",/).captures[0]

        current_model = Model.new
        current_model.name = ($options[:prefix] ? $options[:prefix] : "")+model_name.classify
        
        current_model.look_for_relationships(model_name.singularize)
      end
      next unless current_model
      if line =~ /end/
        @models << current_model
        current_model = nil
      elsif !new_model
        prop = line.match(/\"(.*?)\"/).captures[0]
        type = line.match(/t.(.*?)\"/).captures[0].strip
        unless (prop =~ /_id/ || (prop == "updated_at" && !$options[:updated_at]) || (prop == "created_at" && !$options[:created_at]))
          p = Property.new
          p.type = OBJC_CONVERSIONS[type.to_sym] || type    
          p.name = $options[:ruby] ? prop : prop.camelize(:lower)
          
          current_model.property_collection.properties << p
        end
      end
    end
  end
  
  def objc_files(&block)
    @models.each do |m|
      yield(m.name+".h", m.print_objc_h)
      yield(m.name+".m", m.print_objc_m)
    end
    if @models.count > 1
      # add a .h file to import them all
      filename = ($options[:prefix] ? $options[:prefix] : "") + $options[:project].gsub(" ","") + ".h"
      str = Generator.objc_header(filename)+"\n\n"
      @models.each do |m|
        str += "#import \"#{m.name}.h\"\n"
      end
      yield(filename, str)
    end
  end
  
  def ruby_files(&block)
    @models.each do |m|
      yield(m.name.underscore+".rb", m.print_ruby)
    end
  end
end

class Runner
  STRING_OPTIONS = [["author", "a"], ["company", "c"], ["project", "p"], ["prefix", "x"]]
  
  def self.shortcut(option)
    STRING_OPTIONS.each do |opt|
      return opt[0] if opt.include?(option)
    end
    
    return nil
  end
  
  def self.parse_options(options)
    dict = {}
    
    current_key = nil
    
    options.each_with_index do |arg, idx|
      if current_key
        dict[current_key.to_sym] = arg
        current_key = nil
      else
        arg = "--help" if arg == "-h"
        if (idx == options.size-1) && arg != "--help"
          path = File.expand_path(arg)
          path += "/" if (path[path.length] != "/")
          dict[:path] = path
        else  
          option = arg.gsub(/^-*/,"").gsub("-","_") #strip leading dashes and make - to _
          sh = shortcut(option)
          if !sh
            dict[option.to_sym] = true
          else
            #will expect a string coming after
            current_key = sh
          end
        end
      end
    end
    
    raise 'The path to a Rails app must be specified as the last argument to this command.' if !dict[:path] && !dict[:help]
    
    dict
  end
  
  def self.write_file(filename, content)
    file_dir = @@output_path + "/" + filename
    
    overwrite = File.exist?(file_dir)
    identical = (overwrite && content.chomp == File.open(file_dir).read.chomp)
    
    sym = identical ? "i" : overwrite ? "o" : "+"
    puts "  #{sym} #{filename}"
    
    File.open(file_dir, "w") do |file|
      file.puts content
    end
  end
  
  def self.run
    schema = nil
    path = $options[:path]
    begin
      schema = File.open(path+"db/schema.rb")
    rescue => e
      puts "Error! Either '#{path}' isn't the root path to a Rails project or your db/schema.rb is misplaced. (#{e})"
      return nil
    end
    
    begin
      Dir.mkdir(@@output_path)
    rescue
    else
      puts "Making directory #{$options[:project]}.gen/"
    end

    puts "Writing files to #{@@output_path}"
    
    g = Generator.new
    g.generate_with_schema(schema)
    
    if $options[:ruby]
      g.ruby_files do |filename, content|
        write_file(filename,content)
      end
    else
      g.objc_files do |filename, content|
        write_file(filename, content)
      end
    end
  end
end

def self.print_help
  this_file = File.expand_path(File.dirname(__FILE__))+"/generate"
  pwd = Dir.pwd

  puts "Usage:"
  puts "   #{this_file[pwd.length+1..this_file.length]} [options] APP_PATH"
  puts ""
  puts "Options for property translation:"
  puts "   --ruby                       Generate Ruby classes for MacRuby and RubyMotion"
  puts "   --created-at                 Include the created_at date property (as NSDate)"
  puts "   --updated-at                 Include the updated_at date property (as NSDate)"
  puts "   --nesting-retrievable-only   Include '-r' for properties relating another model"
  puts "   --mutable-sets               Use sets instead of arrays for has_many relations"
  puts ""
  puts "Options for file styling: (each expects a string following)"
  puts "   -a, --author                 "
  puts "   -p, --project                "
  puts "   -c, --company                "
  puts "   -x, --prefix                 Prefix for classes and filenames"
  puts ""
end

begin
  $options = Runner.parse_options(ARGV)
  if ($options[:help])
    print_help
  else
    $options[:project] ||= $options[:path].split("/").last
    $options[:company] ||= $options[:author] || ENV["USER"] || ENV["USERNAME"]
    $options[:author] ||= "NSRails autogen"
  
    output = File.expand_path(File.dirname(__FILE__))+"/"+$options[:project]+".gen"
    Runner.class_variable_set(:@@output_path, output)
    
    Runner.run
  end
rescue => e
  puts "Error! #{e}\nUse --help or -h for help."
end
