#!/usr/bin/env ruby

require 'rubygems'
require 'active_support/inflector'

class Model
  attr_accessor :name, :property_collection
  
  def initialize
    super
    @property_collection = PropertyCollection.new
  end
  
  def look_for_relationships(file, camelize)    
    begin
      model_file = File.open(@@options["path"]+"app/models/#{file}.rb")
    rescue => e
      return
    end
    
    while line = model_file.gets()
      next if (line.length > 0 && line[0] == "#")

      begin
        match = line.match(/:([^,]*)(,?)/).captures[0].strip
      rescue
        next
      end

      p = Property.new
      p.name = camelize ? match.camelize(:lower) : match
      p.has_many = line =~ /has_many/
      p.belongs_to = line =~ /belongs_to/
      
      if p.has_many || p.belongs_to || line =~ /has_one/
        if line =~ /:class_name/
          match = line.match(/:class_name => ([^,]*)(,?)/)
          if match
            c_name = match.captures[0].strip
            c_name.gsub!("'","")
            c_name.gsub!("\"","")

            p.nested_class = c_name
          end
        else
          p.nested_class = p.name.classify
        end
        
        p.nested_class = @@options["prefix"]+p.nested_class if @@options["prefix"]
        
        if p.has_many
          p.type = @@options["mutable-sets"] ? "NSMutableSet" : "NSMutableArray"
        else
          p.type = p.nested_class
        end
        
     #   puts "detected prop: #{p.name}"
        
        @property_collection.properties << p
      end
    end    
  end
  
  def interface_properties
    final = []
    property_collection.props_grouped_by_type.each do |type, props|
      final << "@property (nonatomic, strong) #{type} #{props.map { |x| "*#{x.name}" }.join(', ')};"
    end
    return nil if final.empty?
    final.join("\n")
  end
  
  def synthesize
    "@synthesize "+@property_collection.property_names.join(", ")+";"
  end
  

  def sync_string(explicit=false)
    if explicit
      @property_collection.properties.map { |p| p.print(true) }.join(", ")
    else
      str = "*, "
      @property_collection.properties.each do |p|
        if p.prints_special?
          str += p.print + ", "
        end
      end
      str[0..str.length-3] #strip off trailing ", "
    end
  end
  
  def print_objc_h
    str = Generator.objc_header("#{@name}.h")+"\n\n"
    
    str += "#import \"NSRails.h\""+"\n\n"
    
    class_imports = property_collection.format_unique_nested_classes("@class %@;")
    str += class_imports + "\n\n" if class_imports
    
    str += "@interface #{@name} : NSRRemoteObject"
    
    props = interface_properties
    str += "\n\n"+props if props
    
    str += "\n\n@end"
  end
  
  def print_objc_m
    str = Generator.objc_header("#{@name}.m")+"\n\n"
  
    str += "#import \"#{@name}.h\""+"\n\n"
    
    file_imports = @property_collection.format_unique_nested_classes('#import "%@.h"')
    str += file_imports + "\n\n" if file_imports
    
    str += "@implementation #{@name}"
    
    synth = synthesize
    if synth
      str += "\n"+synth
      if @property_collection.has_special_sync?
        str += "\nNSRMap(#{sync_string});"
      end
    end
    
    str += "\n\n@end"
  end
  
  def print_ruby
    str = "class #{@name} < NSRRemoteObject\n"
    
    names = @property_collection.property_names
    if names && !names.empty?
      str += "  attr_accessor :#{names.join(', :')}\n"
      
      ###TODO: Remove this when attr_reader bug is fixed!
      str += "\n  #TODO: Remove this when attr_reader bug is fixed\n"
      names.each do |x|
        str += "  def #{x}; @#{x}; end\n"
      end
      ###
      
      str += "\n  def self.NSRMap\n    '#{sync_string(true)}'\n  end"
    end
    
    str += "\nend"
  end
end

class PropertyCollection
  attr_accessor :properties
  
  def initialize
    @properties = []
  end
  
  def property_names
    @properties.map { |p| p.name }
  end
  
  def format_unique_nested_classes(format)
    done = []
    @properties.each do |p|
      next if !p.nested_class
      str = format.gsub("%@", p.nested_class)
      if !done.include?(str)
        done << str
      end
    end
    return nil if done.empty?
    done.join("\n")
  end
  
  def props_grouped_by_type
    types = {}
    @properties.each do |prop|
      types[prop.type] ||= []
      types[prop.type] << prop
    end
    types
  end
  
  def has_special_sync?
    @properties.each do |prop|
      if prop.prints_special?
        return true
      end
    end
    false
  end
end

class Property
  attr_accessor :nested_class, :name, :type, :belongs_to, :has_many
    
  def date?
    @type == "NSDate"
  end
  
  def prints_special?
    (belongs_to || date? || nested_class) && !(has_many && belongs_to)
  end
  
  def print(explicit = false)
    str = self.name
    if self.nested_class
      str += ":#{self.nested_class}" if explicit || self.has_many
      added_flag = false
      if self.belongs_to
        added_flag = true
        str += " -b"
      elsif explicit
        added_flag = true
        str += " -m"
      end
      if @@options["nesting-retrievable-only"]
        str += "#{!added_flag ? ' -' : ''}r"
      end
    elsif self.date?
      if explicit
        str += ":NSDate"
      end
      if (self.name.camelize(:lower) == "createdAt" || self.name.camelize(:lower) == "updatedAt")
        str += " -r"
      end
    end
    str
  end
end

class Generator  
  attr_accessor :prefix, :ruby, :created_at, :updated_at
  
  OBJC_CONVERSIONS = {"integer" => "NSNumber", "float" => "NSNumber", "double" => "NSNumber", "string" => "NSString", "text" => "NSString", "datetime" => "NSDate", "date" => "NSDate", "boolean" => "NSNumber"}
  
  def self.objc_header(file)
%Q{//
//  #{file}
//  #{@@options["project"]}
//
//  Created by #{@@options["author"]} on #{Time.now.strftime("%m/%d/%Y")}.
//  Copyright (c) #{Time.now.year.to_s} #{@@options["company"]}. All rights reserved.
//}
  end
  
  def generate_with_schema(schema)
   @models = []

    current_model = nil
    while line = schema.gets()
      if (line.length > 0 && line[0] == "#"[0])
        next
      end
      
      new_model = false
      if line =~ /create_table/
        new_model = true
        model_name = line.match(/create_table "(.*)",/).captures[0]

        current_model = Model.new
        current_model.name =  (@prefix ? @prefix : "")+model_name.classify
        
        current_model.look_for_relationships(model_name.singularize, !ruby)
      end
      next unless current_model
      if line =~ /end/
        @models << current_model
        current_model = nil
      elsif !new_model
        prop = line.match(/\"(.*?)\"/).captures[0]
        type = line.match(/t.(.*?)\"/).captures[0].strip
        unless (prop =~ /_id/ || (prop == "updated_at" && !updated_at) || (prop == "created_at" && !created_at))
          p = Property.new
          p.type = OBJC_CONVERSIONS[type] || type    
          p.name = ruby ? prop : prop.camelize(:lower)
          
          current_model.property_collection.properties << p
        end
      end
    end
  end
  
  def objc_files(&block)
    @models.each do |m|
      yield(m.name+".h", m.print_objc_h)
      yield(m.name+".m", m.print_objc_m)
    end
    if @models.count > 1
      # add a .h file to import them all
      filename = (@@options["prefix"] ? @@options["prefix"] : "") + @@options["project"].gsub(" ","") + ".h"
      str = Generator.objc_header(filename)+"\n\n"
      @models.each do |m|
        str += "#import \"#{m.name}.h\"\n"
      end
      yield(filename, str)
    end
  end
  
  def ruby_files(&block)
    @models.each do |m|
      yield(m.name.underscore+".rb", m.print_ruby)
    end
  end
end

class Runner
  STRING_OPTIONS = [["author", "a"], ["company", "c"], ["project", "p"], ["prefix", "x"]]
  
  def self.shortcut(option)
    STRING_OPTIONS.each do |opt|
      return opt[0] if opt.include?(option)
    end
    
    return nil
  end
  
  def self.parse_options(options)
    dict = {}
    
    current_key = nil
    
    options.each_with_index do |arg, idx|
      if current_key
        dict[current_key] = arg
        current_key = nil
      else
        arg = "--help" if arg == "-h"
        if (idx == options.size-1) && arg != "--help"
          path = File.expand_path(arg)
          path += "/" if (path[path.length] != "/")
          dict["path"] = path
        else  
          option = arg.gsub(/^-*/,"") #strip leading dashes
          sh = shortcut(option)
          if !sh
            dict[option] = true
          else
            #will expect a string coming after
            current_key = sh
          end
        end
      end
    end
    
    raise 'The path to a Rails app must be specified as the last argument to this command.' if !dict["path"] && !dict["help"]
    
    dict
  end
  
  def self.write_file(filename, content)
    file_dir = @@output_path + "/" + filename
    
    overwrite = File.exist?(file_dir)
    identical = false
    
    if (overwrite && content.chomp == File.open(file_dir).read.chomp)
      identical = true
      overwrite = false
    end
    
    sym = overwrite ? "o" : identical ? "i" : "+"
    puts "  #{sym} #{filename}"
    
    File.open(file_dir, "w") do |file|
      file.puts content
    end
  end
  
  def self.run
    schema = nil
    path = @@options["path"]
    begin
      schema = File.open(path+"db/schema.rb")
    rescue => e
      puts "Error! Either '#{path}' isn't the root path to a Rails project or your db/schema.rb is misplaced. (#{e})"
      return nil
    end
    
    begin
      puts "Making directory #{@@options["project"]}.gen/"
      Dir.mkdir(@@output_path)
    rescue
    end

    puts "Writing files to #{@@output_path}"
    
    g = Generator.new
    g.prefix = @@options["prefix"]
    g.ruby = @@options["ruby"]
    g.created_at = @@options["created-at"]
    g.updated_at = @@options["updated-at"]

    g.generate_with_schema(schema)
    
    if @@options["ruby"]
      g.ruby_files do |filename, content|
        write_file(filename,content)
      end
    else
      g.objc_files do |filename, content|
        write_file(filename, content)
      end
    end
  end
end

def self.print_help
  this_file = File.expand_path(File.dirname(__FILE__))+"/generate"
  pwd = Dir.pwd

  puts "Usage:"
  puts "   #{this_file[pwd.length+1..this_file.length]} [options] APP_PATH"
  puts ""
  puts "Options for property translation:"
  puts "   --ruby                       Generate Ruby classes for MacRuby and RubyMotion"
  puts "   --created-at                 Include the created_at date property (as NSDate)"
  puts "   --updated-at                 Include the updated_at date property (as NSDate)"
  puts "   --nesting-retrievable-only   Include '-r' for properties relating another model"
  puts "   --mutable-sets               Use sets instead of arrays for has_many relations"
  puts ""
  puts "Options for file styling: (each expects a string following)"
  puts "   -a, --author                 "
  puts "   -p, --project                "
  puts "   -c, --company                "
  puts "   -x, --prefix                 Prefix for classes and filenames"
  puts ""
end

begin
  @@options = Runner.parse_options(ARGV)
  if (@@options["help"] || @@options["h"])
    print_help
  else
    @@options["project"] ||= @@options["path"].split("/").last
    @@options["company"] ||= @@options["author"] || ENV['USER'] || ENV['USERNAME']
    @@options["author"] ||= "NSRails autogen"
  
    @@output_path = File.expand_path(File.dirname(__FILE__))+"/"+@@options["project"]+".gen"
  
    Runner.run if @@options
  end
rescue => e
  puts "Error! #{e}\nUse --help or -h for help."
end
